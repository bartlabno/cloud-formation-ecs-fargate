---
- name: define project region if specific
  set_fact: 
    env_region: "{{ project_env[current_env].project_region }}"
  when: project_env[current_env].project_region is defined

- name: define project region if not specific
  set_fact: 
    env_region: "{{ project_region }}"
  when: project_env[current_env].project_region is undefined

- name: check default vpc if not defined
  command: aws ec2 describe-vpcs --profile {{ current_env }} --region "{{ env_region }}" --filters Name=isDefault,Values=true --output text --query Vpcs[].VpcId
  register: default_vpc
  when: use_vpc is not defined

- name: check default subnets if not defined
  shell: aws ec2 describe-subnets --profile {{ current_env }} --region "{{ env_region }}" --filters Name=default-for-az,Values=true Name=vpc-id,Values="{{ default_vpc.stdout }}" --output text --query Subnets[].SubnetId | tr "\\t" ", "
  register: subnets
  when: use_subnets is not defined

- name: set default vpc if not defined
  set_fact: use_vpc="{{ default_vpc.stdout }}"
  when: use_vpc is not defined

- name: set default subnet if not defined
  set_fact: use_subnets="{{ subnets.stdout }}"
  when: use_subnets is not defined

- name: secrets workaround
  shell: aws secretsmanager get-secret-value --secret-id /{{ project_name }}/{{ current_env }}/{{ application_name }}/{{ item }} --output text --query SecretString
  when: secret_vars is defined
  with_items: "{{ secret_vars }}"
  register: secret_result
  no_log: True

- name: core fargate stack
  local_action:
    module: cloudformation
    profile: "{{ current_env }}"
    disable_rollback: true
    create_timeout: 30
    stack_name: "{{ project_name }}-{{ current_env }}-ansible-managed"
    state: "{{ state }}"
    region: "{{ env_region }}"
    template_body: "{{ lookup('template', 'fargate-core.yaml.j2') }}"
    template_parameters:
        ProjectName: "{{ project_name }}"
        EnvironmentName: "{{ current_env }}"
        VPC: "{{ use_vpc }}"
        Subnets: "{{ use_subnets }}"
        AllowedIp: "{{ project_env[current_env].allowed_ip }}"
        RootDomain: "{{ root_domain }}"
        RootAccount: "{{ root_account }}"
        ExistHostedZone: "{{ hosted_zone }}"
        CpuLimit: "{{ cpu_limit }}"
        MemoryLimit: "{{ mem_limit }}"
        DesiredCount: "{{ desired_count }}"
    tags: 
        Stack: "{{ project_name }}-{{ current_env }}-ansible"
        Managed by: Managed by Ansible
  register: core_outputs

- name: register http listener rule if exists
  shell: aws elbv2 describe-listeners --load-balancer-arn {{ core_outputs.stack_outputs.LoadBalancer }} --region {{ env_region }} --query 'Listeners[?Port==`80`].ListenerArn' --output text
  register: http_listener
  when: port_expose != 80
  ignore_errors: yes

- name: register https listener rule if exists
  shell: aws elbv2 describe-listeners --load-balancer-arn {{ core_outputs.stack_outputs.LoadBalancer }} --region {{ env_region }} --query 'Listeners[?Port==`443`].ListenerArn' --output text
  register: https_listener
  when: port_expose != 443
  ignore_errors: yes

- name: set listener http
  set_fact: http_rule="{{ http_listener.stdout }}"
  ignore_errors: yes

- name: set listener https
  set_fact: https_rule="{{ https_listener.stdout }}"
  ignore_errors: yes

- name: service fargate stack
  local_action:
    module: cloudformation
    profile: "{{ current_env }}"
    disable_rollback: true
    create_timeout: 30
    stack_name: "{{ project_name }}-{{ application_name }}-{{ current_env }}-ansible-managed"
    state: "{{ state }}"
    region: "{{ env_region }}"
    template_body: "{{ lookup('template', 'fargate-services.yaml.j2') }}"
    template_parameters:
        LoadBalancer: "{{ core_outputs.stack_outputs.LoadBalancer }}"
        LoadBalancerDns: "{{ core_outputs.stack_outputs.LoadBalancerDns }}"
        FargateSecurityGroup: "{{ core_outputs.stack_outputs.FargateSecurityGroup }}"
        ECSTaskExecutionRole: "{{ core_outputs.stack_outputs.ECSTaskExecutionRole }}"
        Cluster: "{{ core_outputs.stack_outputs.Cluster }}"
        ProjectName: "{{ project_name }}"
        EnvironmentName: "{{ current_env }}"
        VPC: "{{ use_vpc }}"
        Subnets: "{{ use_subnets }}"
        PortExpose: "{{ port_expose }}"
        AllowedIp: "{{ project_env[current_env].allowed_ip }}"
        ApplicationName: "{{ application_name }}"
        RootDomain: "{{ root_domain }}"
        BranchName: "{{ branch_name }}"
        BuildNumber: "{{ build_number }}"
        RootAccount: "{{ root_account }}"
        ExistHostedZone: "{{ hosted_zone }}"
        CpuLimit: "{{ cpu_limit }}"
        MemoryLimit: "{{ mem_limit }}"
        DesiredCount: "{{ desired_count }}"
        HealthCheckPath: "{{ health_check }}"
        Priority: "{{ port_expose }}"
        ListenerHttp: "{{ http_rule }}"
        ListenerHttps: "{{ https_rule }}"
    tags: 
        Stack: "{{ project_name }}-{{ application_name }}-{{ current_env }}-ecs-ansible"
        Managed by: Managed by Ansible
