Description: >
  Complete ECS Fargate stack covering networking, VPC, security groups, load balancers,
  listeners, cluster, route53, services, task definitions and deployment

Parameters:
# Basic application params like project name, env or build number
  ProjectName:
    Description: Project Name
    Type: String

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    AllowedValues:
      - sandbox
      - dev
      - uat
      - staging
      - prod

  ApplicationName:
    Description: Application name
    Type: String

  BranchName:
    Description: Current name of git branch
    Type: String

  BuildNumber:
    Description: Jenkins build Number
    Type: String

# Network related variables
  VPC:
    Description: Choose which VPC the security groups should be deployed to
    Type: {% if create_vpc %}AWS::EC2::VPC::Id{% else %}String{% endif %}

  Subnets:
    Description: Choose which subnets the Application Load Balancer should be deployed to
    Type: {% if create_vpc %}List<AWS::EC2::Subnet::Id>{% else %}CommaDelimitedList{% endif %}

  # SecurityGroup:
  #   Description: Select the Security Group to apply to the Application Load Balancer
  #   Type: AWS::EC2::SecurityGroup::Id

  AllowedIp:
    Description: Allowed IP ranged to access Load Balancer Secuirty Group
    Type: String
    Default: 0.0.0.0/0
  
  PortExpose:
    Description: Port to be exposed
    Type: Number
    Default: 80

  # Listener:
  #   Description: The Application Load Balancer listener to register with
  #   Type: String

  Ttl:
    Description: Time-to-live TTL
    Type: Number
    Default: 300
  
  RootDomain:
    Description: Root domain to be used for this Project
    Type: String

# Service and task related variables
  DesiredCount:
    Description: How many instances of this task should we run across our cluster?
    Type: Number
    Default: 1

  HealthCheckPath:
    Description: Healthcheck path for Application Load Balancer
    Type: String
    Default: /health

  MemoryLimit:
    Description: Memory Limit for Container
    Type: Number
    Default: 512

  CpuLimit:
    Description: Cpu Limit
    Type: Number
    Default: 256
  
Resources:
# Route 53 hosted zone configuration
  HostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Sub ${EnvironmentName}.${ProjectName}.${RootDomain}.

# Security groups for cluster and load balancers
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the load balancer that sits in front of ECS
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: !Ref AllowedIp
          FromPort: !Ref PortExpose
          ToPort: !Ref PortExpose
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-LoadBalancers

  FargateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the ECS Fargate from ELB only
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          IpProtocol: -1
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${EnvironmentName}-ELB-ECS

# Cluster creation, services providing
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${ProjectName}-${EnvironmentName}

  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      Cluster: !Ref Cluster
      Role: !Ref ServiceRole
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Sub ${ProjectName}-${ApplicationName}-${EnvironmentName}
          ContainerPort: !Ref PortExpose
          TargetGroupArn: !Ref TargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ApplicationName
      Memory: !Ref MemoryLimit
      Cpu: !Ref CpuLimit
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: !Ref ApplicationName
          Essential: true
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProjectName}-${ApplicationName}:${BranchName}-${BuildNumber}
          PortMappings:
            - ContainerPort: !Ref PortExpose
              HostPort: !Ref PortExpose
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub ${ProjectName}-${EnvironmentName}
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ApplicationName

# Cloudwatch logging group
  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${ProjectName}-${EnvironmentName}
      RetentionInDays: 365

# Load balancer default configuration
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ProjectName}-${EnvironmentName}-LB
      Subnets: !Ref Subnets
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Environment
          Value: !Ref EnvironmentName
        - Key: Managed by
          Value: CloudFormation and DevOps at Burrows
        - Key: Name
          Value: !Ref ProjectName

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref PortExpose
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ProjectName}-${ApplicationName}-${EnvironmentName}-default
      VpcId: !Ref VPC
      Port: !Ref PortExpose
      Protocol: HTTP

# Load balancers target group and listener
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: !Ref PortExpose
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref Listener
      Conditions:
        - Field: host-header
          Values:
            - !Sub ${ApplicationName}.${EnvironmentName}.${ProjectName}.${RootDomain}
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

# Route 53 dns record
  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZone
      Comment: !Sub ${ProjectName}-${ApplicationName}-${EnvironmentName}
      Name: !Sub ${ApplicationName}.${EnvironmentName}.${ProjectName}.${RootDomain}.
      Type: CNAME
      TTL: !Ref Ttl
      ResourceRecords: 
        - !Sub ${LoadBalancer.DNSName}

  # Access to register/unregister service with ALB.
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: !Sub ecs-service-${AWS::StackName}
          PolicyDocument:
            {
              "Version": "2012-10-17",
              "Statement":
                [
                  {
                    "Effect": "Allow",
                    "Action":
                      [
                        "ec2:AuthorizeSecurityGroupIngress",
                        "ec2:Describe*",
                        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                        "elasticloadbalancing:Describe*",
                        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                        "elasticloadbalancing:DeregisterTargets",
                        "elasticloadbalancing:DescribeTargetGroups",
                        "elasticloadbalancing:DescribeTargetHealth",
                        "elasticloadbalancing:RegisterTargets",
                      ],
                    "Resource": "*",
                  },
                ],
            }

Outputs:
  Domain:
    Description: Domain
    Value: !Ref RecordSet
