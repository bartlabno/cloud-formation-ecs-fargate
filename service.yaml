Description: >
  Template to task definition, service configuration and start service on existing cluster.
  Links task with listener and target group also creates log group.

Parameters:
  VPC:
    Description: The VPC that the ECS cluster is deployed to
    Type: AWS::EC2::VPC::Id

  Cluster:
    Description: Please provide the ECS Cluster ID that this service should run on
    Type: String

  DesiredCount:
    Description: How many instances of this task should we run across our cluster?
    Type: Number
    Default: 2

  Listener:
    Description: The Application Load Balancer listener to register with
    Type: String

  HealthCheckPath:
    Description: Healthcheck path for Application Load Balancer
    Type: String
    Default: /health

  Environment:
    Description: Environment to deploy to
    Type: String

  ProjectName:
    Description: Project Name
    Type: String

  ApplicationName:
    Description: Application Name
    Type: String

  BranchName:
    Description: Current name of git branch
    Type: String

  BuildNumber:
    Description: Jenkins build Number
    Type: String

  PortExpose:
    Description: Port to be exposed
    Type: String

  MemoryLimit:
    Description: Memory Limit for Container
    Type: String
    Default: 512

Resources:
  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      Cluster: !Ref Cluster
      Role: !Ref ServiceRole
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: !Sub ${ProductName}-${ApplicationName}-${Environment}
          ContainerPort: !Ref PortExpose
          TargetGroupArn: !Ref TargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ApplicationName
      ContainerDefinitions:
        - Name: !Ref ApplicationName
          Essential: true
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ProjectName}-${ApplicationName}:${BranchName}-${BuildNumber}
          Memory: !Ref MemoryLimit
          PortMappings:
            - ContainerPort: !Ref PortExpose
              HostPort: !Ref PortExpose
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub ${ProjectName}-${Environment}
              awslogs-region: !Ref AWS::Region
              awslogs-prefix: !Ref ApplicationName

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${ProjectName}-${Environment}
      RetentionInDays: 365

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: !Ref PortExpose
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref Listener
      Conditions:
        - Field: host-header
          Values:
            - !Ref Domain
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  # This IAM Role grants the service access to register/unregister with the
  # Application Load Balancer (ALB). It is based on the default documented here:
  # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-service-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: !Sub ecs-service-${AWS::StackName}
          PolicyDocument:
            {
              "Version": "2012-10-17",
              "Statement":
                [
                  {
                    "Effect": "Allow",
                    "Action":
                      [
                        "ec2:AuthorizeSecurityGroupIngress",
                        "ec2:Describe*",
                        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                        "elasticloadbalancing:Describe*",
                        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                        "elasticloadbalancing:DeregisterTargets",
                        "elasticloadbalancing:DescribeTargetGroups",
                        "elasticloadbalancing:DescribeTargetHealth",
                        "elasticloadbalancing:RegisterTargets",
                      ],
                    "Resource": "*",
                  },
                ],
            }
